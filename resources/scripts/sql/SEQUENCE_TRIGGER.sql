-- THIS FILE IS FINALIZED AND SEALED.
-- DO NOT MODIFY THIS FILE.
-- [SEALED BY HELIOS 23/5/2025] --

CREATE SEQUENCE ACC_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_ACCOUNT_SEQ
    BEFORE INSERT
    ON ACCOUNT
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.EMPLOYEE_ID
            || TO_CHAR(:NEW.CREATION_TIME, 'YYMMDD')
            || LPAD(ACC_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE SEQUENCE ASG_SEQ
    START WITH 0001
    INCREMENT BY 1
    MAXVALUE 9999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_ASSIGNMENT_SEQ
    BEFORE INSERT
    ON ASSIGNMENT
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.STORE_ID
            || :NEW.EMPLOYEE_ID
            || TO_CHAR(SYSTIMESTAMP, 'YYMMDD')
            || LPAD(ASG_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/

CREATE SEQUENCE CAT_SEQ
    START WITH 00001
    INCREMENT BY 1
    MAXVALUE 99999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_CATEGORY_SEQ
    BEFORE INSERT
    ON CATEGORY
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := 'C'
            || LPAD(CAT_SEQ.NEXTVAL, 5, '0');
    END IF;
END;
/

CREATE SEQUENCE EMP_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_EMPLOYEE_SEQ
    BEFORE INSERT
    ON EMPLOYEE
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := TO_CHAR(:NEW.HIRE_DATE, 'YYMMDD')
            || LPAD(EMP_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE SEQUENCE INV_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_INVOICE_SEQ
    BEFORE INSERT
    ON INVOICE
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.STORE_ID
            || TO_CHAR(:NEW.CREATION_TIME, 'YYMMDD')
            || LPAD(INV_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE SEQUENCE MEMBER_SEQ
    START WITH 0001
    INCREMENT BY 1
    MAXVALUE 9999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_MEMBER_SEQ
    BEFORE INSERT
    ON MEMBER
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.PHONE_NUMBER
            || TO_CHAR(:NEW.REGISTRATION_TIME, 'YYMMDD')
            || LPAD(MEMBER_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/

CREATE SEQUENCE PAYCHECK_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_PAYCHECK_SEQ
    BEFORE INSERT
    ON PAYCHECK
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.EMPLOYEE_ID
            || TO_CHAR(:NEW.PAY_DATE, 'YYMMDD')
            || LPAD(PAYCHECK_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

-- KHÔNG CYCLE - KHÔNG RESET SEQUENCES
CREATE SEQUENCE PAYMENT_SEQ
    START WITH 001
    INCREMENT BY 1
    MAXVALUE 999
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_PAY_SEQ
    BEFORE INSERT
    ON PAYMENT
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := 'P'
            || LPAD(PAYMENT_SEQ.NEXTVAL, 3, '0');
    END IF;
END;
/

CREATE SEQUENCE POINT_SEQ
    START WITH 0001
    INCREMENT BY 1
    MAXVALUE 9999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_POINT_SEQ
    BEFORE INSERT
    ON POINT_UPDATE_LOG
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.INVOICE_ID
            || TO_CHAR(SYSTIMESTAMP, 'YYMMDD')
            || LPAD(POINT_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/

-- KHÔNG CYCLE
CREATE SEQUENCE PROMO_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_PROMOTION_SEQ
    BEFORE INSERT
    ON PROMOTION
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := TO_CHAR(:NEW.START_TIME, 'YYMMDD')
            || LPAD(PROMO_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

-- KHÔNG CYCLE - KHÔNG RESET SEQUENCES
CREATE SEQUENCE ROLE_SEQ
    START WITH 001
    INCREMENT BY 1
    MAXVALUE 999
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_ROLE_SEQ
    BEFORE INSERT
    ON ROLE
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := 'R'
            || LPAD(ROLE_SEQ.NEXTVAL, 3, '0');
    END IF;
END;
/

CREATE SEQUENCE SHIFT_SEQ
    START WITH 0001
    INCREMENT BY 1
    MAXVALUE 9999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_SHIFT_SEQ
    BEFORE INSERT
    ON SHIFT_REPORT
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.STORE_ID
            || :NEW.EMPLOYEE_ID
            || TO_CHAR(:NEW.START_TIME, 'YYMMDD')
            || LPAD(SHIFT_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/

-- KHÔNG CYCLE - KHÔNG RESET SEQUENCES
CREATE SEQUENCE STORE_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_STORE_SEQ
    BEFORE INSERT
    ON STORE
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := 'VN'
            || LPAD(STORE_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE SEQUENCE TOKEN_SEQ
    START WITH 00000001
    INCREMENT BY 1
    MAXVALUE 99999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_TOKEN_SEQ
    BEFORE INSERT
    ON TOKEN
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := TO_CHAR(:NEW.ISSUED_AT, 'YYMMDD')
            || TO_CHAR(:NEW.EXPIRES_AT, 'YYMMDD')
            || LPAD(TOKEN_SEQ.NEXTVAL, 8, '0');
    END IF;
END;
/

CREATE SEQUENCE INVENTORY_TRANSACTION_SEQ
    START WITH 00000001
    INCREMENT BY 1
    MAXVALUE 99999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_INVENTORY_TRANSACTION_SEQ
    BEFORE INSERT
    ON INVENTORY_TRANSACTION
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.STORE_ID
            || TO_CHAR(:NEW.CREATION_TIME, 'YYMMDD')
            || LPAD(INVENTORY_TRANSACTION_SEQ.NEXTVAL, 8, '0');
    END IF;
END;
/

CREATE SEQUENCE INVENTORY_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_INVENTORY_SEQ
    BEFORE INSERT
    ON INVENTORY
    FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := :NEW.STORE_ID
            || TO_CHAR(:NEW.MODIFICATION_TIME, 'YYMMDD')
            || LPAD(INVENTORY_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

-- TRIGGER KHÁC

CREATE OR REPLACE TRIGGER TRG_CHECK_EMPLOYEE_CONTACT
    BEFORE INSERT OR UPDATE
    ON EMPLOYEE
    FOR EACH ROW
DECLARE
    ERR_EMAIL CONSTANT PLS_INTEGER := -20020;
    ERR_PHONE CONSTANT PLS_INTEGER := -20021;
BEGIN
    -- KIỂM TRA ĐỊNH DẠNG EMAIL
    IF NOT REGEXP_LIKE(:NEW.EMAIL, '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$', 'i') THEN
        RAISE_APPLICATION_ERROR(
                ERR_EMAIL,
                'EMAIL KHÔNG HỢP LỆ. VÍ DỤ HỢP LỆ: USER@GMAIL.COM'
        );
    END IF;

    -- KIỂM TRA PHONE NUMBER CHỈ GỒM 10 CHỮ SỐ
    IF NOT REGEXP_LIKE(:NEW.PHONE_NUMBER, '^[0-9]{10}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_PHONE,
                'SỐ ĐIỆN THOẠI PHẢI GỒM ĐÚNG 10 CHỮ SỐ, KHÔNG CHỨA KÝ TỰ KHÁC.'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_CHECK_MEMBER_CONTACT
    BEFORE INSERT OR UPDATE
    ON MEMBER
    FOR EACH ROW
DECLARE
    ERR_EMAIL CONSTANT PLS_INTEGER := -20030;
    ERR_PHONE CONSTANT PLS_INTEGER := -20031;
BEGIN
    -- KIỂM TRA ĐỊNH DẠNG EMAIL
    IF NOT REGEXP_LIKE(:NEW.EMAIL, '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$', 'i') THEN
        RAISE_APPLICATION_ERROR(
                ERR_EMAIL,
                'EMAIL KHÔNG HỢP LỆ. VÍ DỤ HỢP LỆ: USER@GMAIL.COM'
        );
    END IF;

    -- KIỂM TRA PHONE NUMBER CHỈ GỒM 10 CHỮ SỐ
    IF NOT REGEXP_LIKE(:NEW.PHONE_NUMBER, '^[0-9]{10}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_PHONE,
                'SỐ ĐIỆN THOẠI PHẢI GỒM ĐÚNG 10 CHỮ SỐ, KHÔNG CHỨA KÝ TỰ KHÁC.'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_MODIFIED_POINT_SEQ
    AFTER INSERT
    ON POINT_UPDATE_LOG
    FOR EACH ROW
BEGIN
    UPDATE MEMBER
    SET LOYALTY_POINTS = LOYALTY_POINTS + :NEW.POINT_CHANGE
    WHERE ID = :NEW.MEMBER_ID;
END;
/

CREATE OR REPLACE TRIGGER TRG_CREATE_INVENTORY_TRANSACTION_SEQ
    AFTER INSERT
    ON INVENTORY_TRANSACTION
    FOR EACH ROW
DECLARE
    V_ROWS_UPDATED NUMBER;
BEGIN
    -- 1. THỬ CẬP NHẬT TỒN KHO
    UPDATE INVENTORY INV
    SET INV.QUANTITY          = INV.QUANTITY + :NEW.QUANTITY,
        INV.MODIFICATION_TIME = SYSTIMESTAMP
    WHERE INV.PRODUCT_ID = :NEW.PRODUCT_ID
      AND INV.STORE_ID = :NEW.STORE_ID;

    V_ROWS_UPDATED := SQL%ROWCOUNT;

    -- 2. NẾU KHÔNG CÓ BẢN GHI, THÌ INSERT MỚI
    IF V_ROWS_UPDATED = 0 THEN
        INSERT INTO INVENTORY (PRODUCT_ID, STORE_ID, QUANTITY)
        VALUES (:NEW.PRODUCT_ID, :NEW.STORE_ID, :NEW.QUANTITY);
    END IF;
END;
/