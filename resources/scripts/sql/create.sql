-- Create ROLE table
CREATE TABLE ROLE
(
    ID         CHAR(4)             NOT NULL,
    NAME       NVARCHAR2(50)       NOT NULL,
    IS_DELETED NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_ROLE PRIMARY KEY (ID),
    CONSTRAINT UK_ROLE_NAME UNIQUE (NAME),
    CONSTRAINT CHK_ROLE_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create PAYMENT_METHOD table
CREATE TABLE PAYMENT
(
    ID         CHAR(4)             NOT NULL,
    NAME       NVARCHAR2(50)       NOT NULL,
    IS_DELETED NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_PAYMENT PRIMARY KEY (ID),
    CONSTRAINT UK_PAYMENT_NAME UNIQUE (NAME),
    CONSTRAINT CHK_PAYMENT_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create CATEGORY table
CREATE TABLE CATEGORY
(
    ID         CHAR(6)             NOT NULL,
    NAME       NVARCHAR2(50)       NOT NULL,
    IS_DELETED NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_CATEGORY PRIMARY KEY (ID),
    CONSTRAINT UK_CATEGORY_NAME UNIQUE (NAME),
    CONSTRAINT CHK_CATEGORY_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create EMPLOYEE table
CREATE TABLE EMPLOYEE
(
    ID           CHAR(12)                               NOT NULL,
    NAME         NVARCHAR2(50)                          NOT NULL,
    POSITION     NVARCHAR2(50)                          NOT NULL,
    HIRE_DATE    TIMESTAMP     DEFAULT SYSTIMESTAMP     NOT NULL,
    EMAIL        VARCHAR2(40)                           NOT NULL,
    PHONE_NUMBER VARCHAR2(10)                           NOT NULL,
    ADDRESS      NVARCHAR2(255)                         NOT NULL,
    HOURLY_WAGE  NUMBER(15, 2) DEFAULT 0                NOT NULL,
    STATUS       NVARCHAR2(50) DEFAULT 'Đang hoạt động' NOT NULL,
    IS_DELETED   NUMBER(1)     DEFAULT 0                NOT NULL,
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (ID),
    CONSTRAINT UK_EMPLOYEE_EMAIL UNIQUE (EMAIL),
    CONSTRAINT UK_EMPLOYEE_PHONE_NUMBER UNIQUE (PHONE_NUMBER),
    CONSTRAINT CHK_EMPLOYEE_HOURLY_WAGE CHECK (HOURLY_WAGE >= 0),
    CONSTRAINT CHK_EMPLOYEE_STATUS CHECK (STATUS IN ('Đang hoạt động', 'Tạm ngừng hoạt động', 'Đã nghỉ việc')),
    CONSTRAINT CHK_EMPLOYEE_POSITION CHECK (POSITION IN
                                            ('Nhân viên quản lý cửa hàng', 'Nhân viên bán hàng')),
    CONSTRAINT CHK_EMPLOYEE_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create STORE table
CREATE TABLE STORE
(
    ID         CHAR(8)        NOT NULL,
    NAME       NVARCHAR2(50)  NOT NULL,
    ADDRESS    NVARCHAR2(255) NOT NULL,
    MANAGER_ID CHAR(12)       NOT NULL,
    CONSTRAINT PK_STORE PRIMARY KEY (ID),
    CONSTRAINT UK_STORE_MANAGER_ID UNIQUE (MANAGER_ID),
    CONSTRAINT FK_STORE_MANAGER_ID FOREIGN KEY (MANAGER_ID)
        REFERENCES EMPLOYEE (ID)
);

-- Create PRODUCT table
CREATE TABLE PRODUCT
(
    ID          CHAR(13)                NOT NULL,
    NAME        NVARCHAR2(100)          NOT NULL,
    UNIT_PRICE  NUMBER(15, 2) DEFAULT 0 NOT NULL,
    CATEGORY_ID CHAR(6)                 NOT NULL,
    IS_DELETED  NUMBER(1)     DEFAULT 0 NOT NULL,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (ID),
    CONSTRAINT FK_PRODUCT_CATEGORY_ID FOREIGN KEY (CATEGORY_ID)
        REFERENCES CATEGORY (ID),
    CONSTRAINT CHK_PRODUCT_UNIT_PRICE CHECK (UNIT_PRICE >= 0),
    CONSTRAINT CHK_PRODUCT_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create MEMBER table
CREATE TABLE MEMBER
(
    ID                CHAR(20)                       NOT NULL,
    NAME              NVARCHAR2(50)                  NOT NULL,
    PHONE_NUMBER      VARCHAR2(10)                   NOT NULL,
    EMAIL             VARCHAR2(40)                   NOT NULL,
    REGISTRATION_TIME TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    LOYALTY_POINTS    NUMBER(6) DEFAULT 0            NOT NULL,
    IS_DELETED        NUMBER(1) DEFAULT 0            NOT NULL,
    CONSTRAINT PK_MEMBER PRIMARY KEY (ID),
    CONSTRAINT UK_MEMBER_PHONE_NUMBER UNIQUE (PHONE_NUMBER),
    CONSTRAINT UK_MEMBER_EMAIL UNIQUE (EMAIL),
    CONSTRAINT CHK_MEMBER_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create PROMOTION table
CREATE TABLE PROMOTION
(
    ID                        CHAR(12)            NOT NULL,
    NAME                      NVARCHAR2(50)       NOT NULL,
    START_TIME                TIMESTAMP           NOT NULL,
    END_TIME                  TIMESTAMP           NOT NULL,
    PRODUCT_ID                CHAR(13)            NOT NULL,
    MINIMUM_PURCHASE_QUANTITY NUMBER(15)          NOT NULL,
    PROMO_PRODUCT_ID          CHAR(13),
    PROMO_PRODUCT_QUANTITY    NUMBER(15)          NOT NULL,
    DISCOUNT_RATE             NUMBER(5, 4)        NOT NULL,
    IS_DELETED                NUMBER(1) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_PROMOTION PRIMARY KEY (ID),
    CONSTRAINT FK_PROMO_PRODUCT_ID FOREIGN KEY (PRODUCT_ID)
        REFERENCES PRODUCT (ID),
    CONSTRAINT FK_PROMO_PROMO_PRODUCT_ID FOREIGN KEY (PROMO_PRODUCT_ID)
        REFERENCES PRODUCT (ID),
    CONSTRAINT CHK_PROMOTION_PERIOD CHECK (START_TIME < END_TIME),
    CONSTRAINT CHK_PROMOTION_DISCOUNT_RATE CHECK (DISCOUNT_RATE BETWEEN 0 AND 1),
    CONSTRAINT CHK_PROMOTION_MINIMUM_PURCHASE_QUANTITY CHECK (MINIMUM_PURCHASE_QUANTITY >= 1),
    CONSTRAINT CHK_PROMOTION_PROMO_QUANTITY CHECK (PROMO_PRODUCT_QUANTITY >= 1),
    CONSTRAINT CHK_PROMOTION_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create ACCOUNT table
CREATE TABLE ACCOUNT
(
    ID            CHAR(24)                               NOT NULL,
    EMPLOYEE_ID   CHAR(12)                               NOT NULL,
    USERNAME      VARCHAR2(50)                           NOT NULL,
    PASSWORD_HASH CHAR(64)                               NOT NULL,
    ROLE_ID       CHAR(4)                                NOT NULL,
    CREATION_TIME TIMESTAMP     DEFAULT SYSTIMESTAMP     NOT NULL,
    STATUS        NVARCHAR2(50) DEFAULT 'Đang hoạt động' NOT NULL,
    IS_DELETED    NUMBER(1)     DEFAULT 0                NOT NULL,
    CONSTRAINT PK_ACCOUNT PRIMARY KEY (ID),
    CONSTRAINT UK_ACCOUNT_USERNAME UNIQUE (USERNAME),
    CONSTRAINT FK_ACCOUNT_EMPLOYEE_ID FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE (ID),
    CONSTRAINT FK_ACCOUNT_ROLE_ID FOREIGN KEY (ROLE_ID)
        REFERENCES ROLE (ID),
    CONSTRAINT CHK_ACCOUNT_STATUS CHECK (STATUS IN ('Đang hoạt động', 'Ngừng hoạt động')),
    CONSTRAINT CHK_ACCOUNT_IS_DELETED CHECK (IS_DELETED IN (0, 1))
);

-- Create INVOICE table
CREATE TABLE INVOICE
(
    ID            CHAR(20)                                NOT NULL,
    CREATION_TIME TIMESTAMP     DEFAULT SYSTIMESTAMP      NOT NULL,
    NET_AMOUNT    NUMBER(15, 2) DEFAULT 0                 NOT NULL,
    DISCOUNT      NUMBER(15, 2) DEFAULT 0                 NOT NULL,
    TOTAL_DUE     NUMBER(15, 2) DEFAULT 0                 NOT NULL,
    STORE_ID      CHAR(8)                                 NOT NULL,
    MEMBER_ID     CHAR(20),
    PAYMENT_ID    CHAR(4)                                 NOT NULL,
    STATUS        NVARCHAR2(50) DEFAULT 'Chưa hoàn thành' NOT NULL,
    EMPLOYEE_ID   CHAR(12)                                NOT NULL,
    POINT_USED    NUMBER(6)     DEFAULT 0                 NOT NULL,
    CONSTRAINT PK_INVOICE PRIMARY KEY (ID),
    CONSTRAINT FK_INVOICE_STORE_ID FOREIGN KEY (STORE_ID)
        REFERENCES STORE (ID),
    CONSTRAINT FK_INVOICE_MEMBER_ID FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (ID),
    CONSTRAINT FK_INVOICE_PAYMENT_ID FOREIGN KEY (PAYMENT_ID)
        REFERENCES PAYMENT (ID),
    CONSTRAINT FK_INVOICE_EMPLOYEE_ID FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE (ID),
    CONSTRAINT CHK_INVOICE_NET_AMOUNT CHECK (NET_AMOUNT >= 0),
    CONSTRAINT CHK_INVOICE_DISCOUNT CHECK (DISCOUNT >= 0),
    CONSTRAINT CHK_INVOICE_TOTAL_DUE CHECK (TOTAL_DUE >= 0),
    CONSTRAINT CHK_INVOICE_STATUS CHECK (STATUS IN ('Chưa hoàn thành', 'Đã hoàn thành', 'Đang yêu cầu hủy', 'Đã hủy')),
    CONSTRAINT CHK_INVOICE_POINT_USED CHECK (POINT_USED >= 0)
);

-- Create SHIFT_REPORT table
CREATE TABLE SHIFT_REPORT
(
    ID                CHAR(16)                           NOT NULL,
    START_TIME        TIMESTAMP     DEFAULT SYSTIMESTAMP NOT NULL,
    END_TIME          TIMESTAMP,
    EWALLET_REVENUE   NUMBER(15, 2) DEFAULT 0            NOT NULL,
    CASH_REVENUE      NUMBER(15, 2) DEFAULT 0            NOT NULL,
    BANK_REVENUE      NUMBER(15, 2) DEFAULT 0            NOT NULL,
    TRANSACTION_COUNT NUMBER(10)    DEFAULT 0            NOT NULL,
    STORE_ID          CHAR(8)                            NOT NULL,
    EMPLOYEE_ID       CHAR(12)                           NOT NULL,
    CONSTRAINT PK_SHIFT_REPORT PRIMARY KEY (ID),
    CONSTRAINT FK_SHIFT_REPORT_STORE_ID FOREIGN KEY (STORE_ID)
        REFERENCES STORE (ID),
    CONSTRAINT FK_SHIFT_REPORT_EMPLOYEE_ID FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE (ID),
    CONSTRAINT CHK_SHIFT_REPORT_ZALOPAY_REVENUE CHECK (EWALLET_REVENUE >= 0),
    CONSTRAINT CHK_SHIFT_REPORT_CASH_REVENUE CHECK (CASH_REVENUE >= 0),
    CONSTRAINT CHK_SHIFT_REPORT_BANK_REVENUE CHECK (BANK_REVENUE >= 0),
    CONSTRAINT CHK_SHIFT_REPORT_TRANSACTION_COUNT CHECK (TRANSACTION_COUNT >= 0),
    CONSTRAINT CHK_SHIFT_REPORT_TIME CHECK (END_TIME IS NULL OR END_TIME >= START_TIME)
);

-- Create INVOICE_DETAIL table
CREATE TABLE INVOICE_DETAIL
(
    INVOICE_ID    CHAR(20)                NOT NULL,
    PRODUCT_ID    CHAR(13)                NOT NULL,
    QUANTITY_SOLD NUMBER(10)    DEFAULT 1 NOT NULL,
    UNIT_PRICE    NUMBER(15, 2) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_INVOICE_DETAIL PRIMARY KEY (INVOICE_ID, PRODUCT_ID, UNIT_PRICE),
    CONSTRAINT FK_INVOICE_DETAIL_INVOICE_ID FOREIGN KEY (INVOICE_ID)
        REFERENCES INVOICE (ID),
    CONSTRAINT FK_INVOICE_DETAIL_PRODUCT_ID FOREIGN KEY (PRODUCT_ID)
        REFERENCES PRODUCT (ID),
    CONSTRAINT CHK_INVOICE_DETAIL_QUANTITY_SOLD CHECK (QUANTITY_SOLD >= 1),
    CONSTRAINT CHK_INVOICE_DETAIL_UNIT_PRICE CHECK (UNIT_PRICE >= 0)
);

-- Create POINT_UPDATE_LOG table
CREATE TABLE POINT_UPDATE_LOG
(
    ID           CHAR(41)  NOT NULL,
    MEMBER_ID    CHAR(20)  NOT NULL,
    INVOICE_ID   CHAR(20)  NOT NULL,
    POINT_CHANGE NUMBER(6) NOT NULL,
    CONSTRAINT PK_POINT_UPDATE_LOG PRIMARY KEY (ID),
    CONSTRAINT FK_POINT_UPDATE_LOG_MEMBER_ID FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (ID),
    CONSTRAINT FK_POINT_UPDATE_LOG_INVOICE_ID FOREIGN KEY (INVOICE_ID)
        REFERENCES INVOICE (ID),
    CONSTRAINT CHK_POINT_UPDATE_LOG_POINT_CHANGE CHECK (POINT_CHANGE != 0)
);

-- Create TOKEN table
CREATE TABLE TOKEN
(
    ID         CHAR(20)                            NOT NULL,
    USERNAME   VARCHAR2(50)                        NOT NULL,
    VALUE      VARCHAR2(4000)                      NOT NULL,
    EXPIRES_AT TIMESTAMP                           NOT NULL,
    ISSUED_AT  TIMESTAMP     DEFAULT SYSTIMESTAMP  NOT NULL,
    STATUS     NVARCHAR2(50) DEFAULT 'Có hiệu lực' NOT NULL,
    CONSTRAINT PK_TOKEN PRIMARY KEY (ID),
    CONSTRAINT UK_TOKEN_VALUE UNIQUE (VALUE),
    CONSTRAINT FK_TOKEN_USERNAME_ACCOUNT FOREIGN KEY (USERNAME)
        REFERENCES ACCOUNT (USERNAME),
    CONSTRAINT CHK_TOKEN_VALID_RANGE CHECK (EXPIRES_AT >= ISSUED_AT),
    CONSTRAINT CHK_TOKEN_STATUS CHECK (STATUS IN ('Có hiệu lực', 'Vô hiệu'))
);

-- Create PAYCHECK table
CREATE TABLE PAYCHECK
(
    ID           CHAR(26)                           NOT NULL, -- Ví dụ PC_250503_000001_241002000039
    EMPLOYEE_ID  CHAR(12)                           NOT NULL,
    GROSS_AMOUNT NUMBER(15, 2) DEFAULT 0            NOT NULL, -- Tổng trước thuế, phụ cấp
    DEDUCTIONS   NUMBER(15, 2) DEFAULT 0            NOT NULL, -- Thuế, bảo hiểm
    NET_AMOUNT   NUMBER(15, 2) DEFAULT 0            NOT NULL, -- Thực lĩnh
    PAY_DATE     TIMESTAMP     DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT PK_PAYCHECK PRIMARY KEY (ID),
    CONSTRAINT FK_PAYCHECK_EMP FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE (ID),
    CONSTRAINT CHK_PAYCHECK_NET CHECK (NET_AMOUNT = GROSS_AMOUNT - DEDUCTIONS)
);


-- Create ASSIGNMENT table
CREATE TABLE ASSIGNMENT
(
    ID          CHAR(30) NOT NULL,
    EMPLOYEE_ID CHAR(12) NOT NULL,
    STORE_ID    CHAR(8)  NOT NULL,
    START_TIME  TIMESTAMP,
    END_TIME    TIMESTAMP,
    CONSTRAINT PK_ASSIGNMENT PRIMARY KEY (ID),
    CONSTRAINT FK_ASSIGNMENT_EMPLOYEE_ID FOREIGN KEY (EMPLOYEE_ID)
        REFERENCES EMPLOYEE (ID),
    CONSTRAINT FK_ASSIGNMENT_STORE_ID FOREIGN KEY (STORE_ID)
        REFERENCES STORE (ID),
    CONSTRAINT CHK_ASSIGNMENT_TIME CHECK (END_TIME >= START_TIME)
);
