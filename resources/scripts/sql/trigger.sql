CREATE OR REPLACE TRIGGER TRG_CHECK_EMPLOYEE_CONTACT
    BEFORE INSERT OR UPDATE
    ON EMPLOYEE
    FOR EACH ROW
DECLARE
    ERR_EMAIL CONSTANT PLS_INTEGER := -20020;
    ERR_PHONE CONSTANT PLS_INTEGER := -20021;
BEGIN
    -- Kiểm tra định dạng email
    IF NOT REGEXP_LIKE(:NEW.EMAIL, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_EMAIL,
                'Email không hợp lệ. Ví dụ hợp lệ: user@example.com'
        );
    END IF;

    -- Kiểm tra phone number chỉ gồm 10 chữ số
    IF NOT REGEXP_LIKE(:NEW.PHONE_NUMBER, '^[0-9]{10}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_PHONE,
                'Số điện thoại phải gồm đúng 10 chữ số, không chứa ký tự khác.'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_CHECK_MEMBER_CONTACT
    BEFORE INSERT OR UPDATE
    ON MEMBER
    FOR EACH ROW
DECLARE
    ERR_EMAIL CONSTANT PLS_INTEGER := -20020;
    ERR_PHONE CONSTANT PLS_INTEGER := -20021;
BEGIN
    -- Kiểm tra định dạng email
    IF NOT REGEXP_LIKE(:NEW.EMAIL, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_EMAIL,
                'Email không hợp lệ. Ví dụ hợp lệ: user@example.com'
        );
    END IF;

    -- Kiểm tra phone number chỉ gồm 10 chữ số
    IF NOT REGEXP_LIKE(:NEW.PHONE_NUMBER, '^[0-9]{10}$') THEN
        RAISE_APPLICATION_ERROR(
                ERR_PHONE,
                'Số điện thoại phải gồm đúng 10 chữ số, không chứa ký tự khác.'
        );
    END IF;
END;
/

CREATE SEQUENCE ACC_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE ASG_SEQ
    START WITH 0001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE CAT_SEQ
    START WITH 00001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE EMP_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE INV_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE MEMBER_SEQ
    START WITH 0001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE PAYCHECK_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE PAY_SEQ
    START WITH 001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE POINT_SEQ
    START WITH 000001
    INCREMENT BY 1
    MAXVALUE 999999
    CYCLE
    NOCACHE;

CREATE SEQUENCE PROMO_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE ROLE_SEQ
    START WITH 001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE SHIFT_SEQ
    START WITH 01
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE STORE_SEQ
    START WITH 000001
    INCREMENT BY 1
    NOCACHE;

CREATE SEQUENCE TOKEN_SEQ
    START WITH 00000001
    INCREMENT BY 1
    NOCACHE;

CREATE OR REPLACE TRIGGER TRG_ACCOUNT_SEQ
    BEFORE INSERT
    ON ACCOUNT
    FOR EACH ROW
BEGIN
    IF :NEW.ACCOUNT_ID IS NULL THEN
        :NEW.ACCOUNT_ID := :NEW.EMPLOYEE_ID
            || TO_CHAR(:NEW.ACCOUNT_CREATION_TIME, 'YYMMDD')
            || LPAD(ACC_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_ASSIGNMENT_SEQ
    BEFORE INSERT
    ON ASSIGNMENT
    FOR EACH ROW
BEGIN
    IF :NEW.ASSIGNMENT_ID IS NULL THEN
        :NEW.ASSIGNMENT_ID := :NEW.STORE_ID
            || TO_CHAR(SYSTIMESTAMP, 'YYMMDD')
            || :NEW.EMPLOYEE_ID
            || LPAD(ASG_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER TRG_CATEGORY_SEQ
    BEFORE INSERT
    ON CATEGORY
    FOR EACH ROW
BEGIN
    IF :NEW.CATEGORY_ID IS NULL THEN
        :NEW.CATEGORY_ID := 'C'
            || LPAD(CAT_SEQ.NEXTVAL, 5, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_EMPLOYEE_SEQ
    BEFORE INSERT
    ON EMPLOYEE
    FOR EACH ROW
BEGIN
    IF :NEW.EMPLOYEE_ID IS NULL THEN
        :NEW.EMPLOYEE_ID := TO_CHAR(:NEW.HIRE_DATE, 'YYMMDD')
            || LPAD(EMP_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_INVOICE_SEQ
    BEFORE INSERT
    ON INVOICE
    FOR EACH ROW
BEGIN
    IF :NEW.INVOICE_ID IS NULL THEN
        :NEW.INVOICE_ID := :NEW.STORE_ID
            || TO_CHAR(:NEW.INVOICE_CREATION_TIME, 'YYMMDD')
            || LPAD(INV_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_MEMBER_SEQ
    BEFORE INSERT
    ON MEMBER
    FOR EACH ROW
BEGIN
    IF :NEW.MEMBER_ID IS NULL THEN
        :NEW.MEMBER_ID := :NEW.PHONE_NUMBER
            || TO_CHAR(:NEW.REGISTRATION_TIME, 'YYMMDD')
            || LPAD(MEMBER_SEQ.NEXTVAL, 4, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_PAYCHECK_SEQ
    BEFORE INSERT
    ON PAYCHECK
    FOR EACH ROW
BEGIN
    IF :NEW.PAYCHECK_ID IS NULL THEN
        :NEW.PAYCHECK_ID := 'PC'
            || TO_CHAR(:NEW.PAY_DATE, 'YYMMDD')
            || LPAD(PAY_SEQ.NEXTVAL, 6, '0')
            || :NEW.EMPLOYEE_ID;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_PAY_SEQ
    BEFORE INSERT
    ON PAYMENT
    FOR EACH ROW
BEGIN
    IF :NEW.PAYMENT_ID IS NULL THEN
        :NEW.PAYMENT_ID := 'P'
            || LPAD(PAY_SEQ.NEXTVAL, 3, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_POINT_BEFORE_SEQ
    BEFORE INSERT
    ON POINT_UPDATE_LOG
    FOR EACH ROW
BEGIN
    IF :NEW.POINT_UPDATE_LOG_ID IS NULL THEN
        :NEW.POINT_UPDATE_LOG_ID := :NEW.INVOICE_ID
            || TO_CHAR(SYSTIMESTAMP, 'YYMMDDHH24MISSFF3')
            || LPAD(POINT_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_POINT_AFTER_SEQ
    AFTER INSERT
    ON POINT_UPDATE_LOG
    FOR EACH ROW
BEGIN
    UPDATE MEMBER
    SET LOYALTY_POINTS = LOYALTY_POINTS + :NEW.POINT_CHANGE
    WHERE MEMBER_ID = :NEW.MEMBER_ID;
END;
/

CREATE OR REPLACE TRIGGER TRG_PROMOTION_SEQ
    BEFORE INSERT
    ON PROMOTION
    FOR EACH ROW
BEGIN
    IF :NEW.PROMOTION_ID IS NULL THEN
        :NEW.PROMOTION_ID := TO_CHAR(:NEW.PROMOTION_START_TIME, 'YYMMDD')
            || LPAD(PROMO_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_ROLE_SEQ
    BEFORE INSERT
    ON ROLE
    FOR EACH ROW
BEGIN
    IF :NEW.ROLE_ID IS NULL THEN
        :NEW.ROLE_ID := 'R'
            || LPAD(ROLE_SEQ.NEXTVAL, 3, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_SHIFT_SEQ
    BEFORE INSERT
    ON SHIFT_REPORT
    FOR EACH ROW
BEGIN
    IF :NEW.SHIFT_REPORT_ID IS NULL THEN
        :NEW.SHIFT_REPORT_ID := :NEW.STORE_ID
            || TO_CHAR(:NEW.SHIFT_START_TIME, 'YYMMDD')
            || LPAD(SHIFT_SEQ.NEXTVAL, 2, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_STORE_SEQ
    BEFORE INSERT
    ON STORE
    FOR EACH ROW
BEGIN
    IF :NEW.STORE_ID IS NULL THEN
        :NEW.STORE_ID := 'VN'
            || LPAD(STORE_SEQ.NEXTVAL, 6, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRG_TOKEN_SEQ
    BEFORE INSERT
    ON TOKEN
    FOR EACH ROW
BEGIN
    IF :NEW.TOKEN_ID IS NULL THEN
        :NEW.TOKEN_ID := TO_CHAR(:NEW.ISSUED_AT, 'YYMMDD')
            || TO_CHAR(:NEW.EXPIRES_AT, 'YYMMDD')
            || LPAD(TOKEN_SEQ.NEXTVAL, 8, '0');
    END IF;
END;
/

