-- Create Department table
CREATE TABLE DEPARTMENT
(
    DEPARTMENT_ID   CHAR(5) PRIMARY KEY,
    DEPARTMENT_NAME NVARCHAR2(50) NOT NULL
);

-- Create EMPLOYEE_STATUS table
CREATE TABLE EMPLOYEE_STATUS
(
    EMPLOYEE_STATUS_ID   CHAR(2)       NOT NULL PRIMARY KEY,
    EMPLOYEE_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create ROLE table
CREATE TABLE ROLE
(
    ROLE_ID   CHAR(4) PRIMARY KEY,
    ROLE_NAME NVARCHAR2(50) NOT NULL
);

-- Create PAYMENT_METHOD table
CREATE TABLE PAYMENT_METHOD
(
    PAYMENT_METHOD_ID   CHAR(2) PRIMARY KEY,
    PAYMENT_METHOD_NAME NVARCHAR2(50) NOT NULL
);

-- Create INVOICE_STATUS table
CREATE TABLE INVOICE_STATUS
(
    INVOICE_STATUS_ID   CHAR(2) PRIMARY KEY,
    INVOICE_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create PACKAGE_STATUS table
CREATE TABLE PACKAGE_STATUS
(
    PACKAGE_STATUS_ID   CHAR(2) PRIMARY KEY,
    PACKAGE_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create PRODUCT_STATUS table
CREATE TABLE PRODUCT_STATUS
(
    PRODUCT_STATUS_ID CHAR(2) PRIMARY KEY,
    PRODUCT_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create PRODUCT_STATUS table
CREATE TABLE CANCELLATION_STATUS
(
    CANCELLATION_STATUS_ID CHAR(2) PRIMARY KEY,
    CANCELLATION_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create CATEGORY table
CREATE TABLE CATEGORY
(
    CATEGORY_ID   CHAR(6) PRIMARY KEY,
    CATEGORY_NAME NVARCHAR2(50) NOT NULL
);

-- Create SUPPLIER table
CREATE TABLE SUPPLIER
(
    SUPPLIER_ID   CHAR(12) PRIMARY KEY,
    SUPPLIER_NAME NVARCHAR2(100) NOT NULL,
    ADDRESS       NVARCHAR2(255),
    PHONE_NUMBER  VARCHAR2(10)   NOT NULL,
    EMAIL         VARCHAR2(50)   NOT NULL
);

-- Create EMPLOYEE table
CREATE TABLE EMPLOYEE
(
    EMPLOYEE_ID   CHAR(12) PRIMARY KEY,
    EMPLOYEE_NAME NVARCHAR2(50)  NOT NULL,
    POSITION      NVARCHAR2(50)  NOT NULL,
    DEPARTMENT_ID CHAR(5)        NOT NULL,
    HIRE_DATE     DATE           NOT NULL,
    EMAIL         VARCHAR2(40)   NOT NULL,
    PHONE_NUMBER  VARCHAR2(10)   NOT NULL,
    ADDRESS       NVARCHAR2(255) NOT NULL,
    HOURLY_WAGE   NUMBER(15, 2)  NOT NULL,
    BASE_SALARY   NUMBER(15, 2)  NOT NULL,
    EMPLOYEE_STATUS_ID CHAR(2) NOT NULL ,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID),
    FOREIGN KEY (EMPLOYEE_STATUS_ID) REFERENCES EMPLOYEE_STATUS(EMPLOYEE_STATUS_ID)
);

-- Create STORE table
CREATE TABLE STORE
(
    STORE_ID   CHAR(10) PRIMARY KEY,
    STORE_NAME NVARCHAR2(50)  NOT NULL,
    ADDRESS    NVARCHAR2(255) NOT NULL,
    MANAGER_ID CHAR(12)       NOT NULL,
    FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

-- Create PRODUCT table
CREATE TABLE PRODUCT
(
    PRODUCT_ID   CHAR(13) PRIMARY KEY,
    PRODUCT_NAME NVARCHAR2(100) NOT NULL,
    UNIT_PRICE   NUMBER(15, 2)  NOT NULL,
    SUPPLIER_ID  CHAR(12)       NOT NULL,
    CATEGORY_ID  CHAR(6)        NOT NULL,
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID)
);

-- Create MEMBER table
CREATE TABLE MEMBER
(
    MEMBER_ID         CHAR(16) PRIMARY KEY,
    MEMBER_NAME       NVARCHAR2(50)                  NOT NULL,
    PHONE_NUMBER      VARCHAR2(10)                   NOT NULL,
    EMAIL             VARCHAR2(40)                   NOT NULL,
    REGISTRATION_TIME DATE      DEFAULT SYSTIMESTAMP NOT NULL,
    LOYALTY_POINTS    NUMBER(6) DEFAULT 0            NOT NULL
);

-- Create PROMOTION table
CREATE TABLE PROMOTION
(
    PROMOTION_ID              CHAR(12) PRIMARY KEY,
    PROMOTION_NAME            NVARCHAR2(50) NOT NULL,
    PROMOTION_START_TIME      DATE          NOT NULL,
    PROMOTION_END_TIME        DATE          NOT NULL,
    PRODUCT_ID                CHAR(13)      NOT NULL,
    MINIMUM_PURCHASE_QUANTITY NUMBER(15)    NOT NULL,
    PROMO_PRODUCT_ID          CHAR(13)      NOT NULL,
    PROMO_QUANTITY            NUMBER(15)    NOT NULL,
    DISCOUNT_RATE             NUMBER(5, 4)  NOT NULL,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID),
    FOREIGN KEY (PROMO_PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
);

-- Create ACCOUNT table
CREATE TABLE ACCOUNT
(
    ACCOUNT_ID            CHAR(12) PRIMARY KEY,
    USERNAME              VARCHAR2(50)              NOT NULL,
    PASSWORD_HASH         CHAR(64)                  NOT NULL,
    ROLE_ID               CHAR(4)                   NOT NULL,
    ACCOUNT_CREATION_TIME DATE DEFAULT SYSTIMESTAMP NOT NULL,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID)
);

-- Create ORDER table (dùng dấu nháy kép vì ORDER là keyword)
CREATE TABLE "ORDER"
(
    ORDER_ID              CHAR(20) PRIMARY KEY,
    STORE_ID              CHAR(10) NOT NULL,
    ORDER_CREATED_TIME    DATE     NOT NULL,
    ORDER_COMPLETION_TIME DATE,
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

-- Create INVOICE table
CREATE TABLE INVOICE
(
    INVOICE_ID            CHAR(20) PRIMARY KEY,
    INVOICE_CREATION_TIME DATE DEFAULT SYSTIMESTAMP NOT NULL,
    NET_AMOUNT            NUMBER(15, 2)             NOT NULL,
    DISCOUNT              NUMBER(15, 2)             NOT NULL,
    TOTAL_DUE             NUMBER(15, 2)             NOT NULL,
    STORE_ID              CHAR(10)                  NOT NULL,
    MEMBER_ID             CHAR(16)                  NOT NULL,
    PAYMENT_METHOD_ID     CHAR(2)                   NOT NULL,
    INVOICE_STATUS_ID     CHAR(2)                   NOT NULL,
    EMPLOYEE_ID           CHAR(12)                  NOT NULL,
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID),
    FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD (PAYMENT_METHOD_ID),
    FOREIGN KEY (INVOICE_STATUS_ID) REFERENCES INVOICE_STATUS (INVOICE_STATUS_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

-- Create PACKAGE table
CREATE TABLE PACKAGE
(
    PACKAGE_ID        CHAR(20) PRIMARY KEY,
    PACKAGE_STATUS_ID CHAR(2) NOT NULL,
    PACKAGING_TIME    DATE    NOT NULL,
    FOREIGN KEY (PACKAGE_STATUS_ID) REFERENCES PACKAGE_STATUS (PACKAGE_STATUS_ID)
);

-- Create SHIFT_CLOSING_REPORT table
CREATE TABLE SHIFT_CLOSING_REPORT
(
    CLOSING_REPORT_ID  CHAR(20) PRIMARY KEY,
    SHIFT_START_TIME   DATE          NOT NULL,
    SHIFT_END_TIME     DATE          NOT NULL,
    ZALOPAY_REVENUE    NUMBER(15, 2) NOT NULL,
    CASH_REVENUE       NUMBER(15, 2) NOT NULL,
    BANK_REVENUE       NUMBER(15, 2) NOT NULL,
    TRANSACTION_COUNT  NUMBER(10)    NOT NULL,
    QUANTITY_SOLD      NUMBER(10)    NOT NULL,
    QUANTITY_CANCELLED NUMBER(10)    NOT NULL,
    STORE_ID           CHAR(10)      NOT NULL,
    EMPLOYEE_ID        CHAR(12)      NOT NULL,
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

-- Create STORE_INVENTORY table
CREATE TABLE STORE_INVENTORY
(
    PRODUCT_ID       CHAR(13)   NOT NULL,
    STOCK_ENTRY_TIME DATE       NOT NULL,
    STORE_ID         CHAR(10)   NOT NULL,
    MANUFACTURE_TIME DATE       NOT NULL,
    EXPIRATION_DATE  DATE       NOT NULL,
    STOCK_QUANTITY   NUMBER(15) NOT NULL,
    PRODUCT_STATUS_ID CHAR(2)   NOT NULL,
    PRIMARY KEY (PRODUCT_ID, STORE_ID, STOCK_ENTRY_TIME, PRODUCT_STATUS_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID),
    FOREIGN KEY (PRODUCT_STATUS_ID) REFERENCES PRODUCT_STATUS(PRODUCT_STATUS_ID)
);

-- Create CANCELLATION table
CREATE TABLE CANCELLATION
(
    CANCELLATION_ID    NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PRODUCT_ID         CHAR(13)                  NOT NULL,
    CANCELLATION_TIME  DATE DEFAULT SYSTIMESTAMP NOT NULL,
    CANCELLED_QUANTITY NUMBER(15)                NOT NULL,
    DESCRIPTION NVARCHAR2(255) NOT NULL,
    CANCELLATION_STATUS_ID CHAR(2) NOT NULL,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID),
    FOREIGN KEY (CANCELLATION_STATUS_ID) REFERENCES CANCELLATION_STATUS(CANCELLATION_STATUS_ID)
);

-- Create ORDER_DETAIL table
CREATE TABLE ORDER_DETAIL
(
    ORDER_ID   CHAR(20)   NOT NULL,
    PRODUCT_ID CHAR(13)   NOT NULL,
    QUANTITY   NUMBER(10) NOT NULL,
    PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES "ORDER" (ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
);

-- Create INVOICE_DETAIL table
CREATE TABLE INVOICE_DETAIL
(
    INVOICE_ID    CHAR(20)   NOT NULL,
    PRODUCT_ID    CHAR(13)   NOT NULL,
    QUANTITY_SOLD NUMBER(10) NOT NULL,
    PRIMARY KEY (INVOICE_ID, PRODUCT_ID),
    FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE (INVOICE_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
);

-- Create PACKAGE_DETAIL table
CREATE TABLE PACKAGE_DETAIL
(
    PACKAGE_ID          CHAR(20)   NOT NULL,
    PRODUCT_ID          CHAR(13)   NOT NULL,
    QUANTITY_IN_PACKAGE NUMBER(10) NOT NULL,
    PRIMARY KEY (PACKAGE_ID, PRODUCT_ID),
    FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGE (PACKAGE_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID)
);

-- Create ATTENDANCE table
CREATE TABLE ATTENDANCE
(
    EMPLOYEE_ID    CHAR(12) NOT NULL,
    CLOCK_IN_TIME  DATE     NOT NULL,
    CLOCK_OUT_TIME DATE     NOT NULL,
    STORE_ID       CHAR(10) NOT NULL,
    PRIMARY KEY (EMPLOYEE_ID, CLOCK_IN_TIME),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
    FOREIGN KEY (STORE_ID) REFERENCES STORE (STORE_ID)
);

-- Create POINT_UPDATE_HISTORY table
CREATE TABLE POINT_UPDATE_HISTORY
(
    MEMBER_ID      CHAR(16)  NOT NULL,
    EXECUTION_TIME DATE      NOT NULL,
    POINT_CHANGE   NUMBER(6) NOT NULL,
    PRIMARY KEY (MEMBER_ID, EXECUTION_TIME),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID)
);



-- Create TOKEN_STATUS table
CREATE TABLE TOKEN_STATUS
(
    TOKEN_STATUS_ID   CHAR(2) PRIMARY KEY,
    TOKEN_STATUS_NAME NVARCHAR2(50) NOT NULL
);

-- Create TOKEN table
CREATE TABLE TOKEN
(
    TOKEN_ID        NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ACCOUNT_ID      CHAR(12)              NOT NULL,
    TOKEN_VALUE     VARCHAR2(4000) UNIQUE NOT NULL,
    EXPIRES_AT      TIMESTAMP             NOT NULL,
    ISSUED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP,
    TOKEN_STATUS_ID CHAR(2)               NOT NULL,
    CONSTRAINT FK_TOKEN_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ACCOUNT_ID),
    CONSTRAINT FK_TOKEN_TOKEN_STATUS FOREIGN KEY (TOKEN_STATUS_ID) REFERENCES TOKEN_STATUS (TOKEN_STATUS_ID)
);

